name: Publish package

on:
  # Manual trigger (safe for testing)
  workflow_dispatch:
  # Automatic trigger when a GitHub Release is published
  release:
    types: [published]

permissions:
  contents: write
  id-token: write

jobs:
  build:
    name: Build package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Install dependencies
        run: npm ci

      - name: Run lint and typecheck
        run: |
          npm run lint
          npm run typecheck

      - name: Run tests
        run: npm run test:ci

      - name: Build package
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v5
        with:
          name: dist
          path: dist/

  publish:
    name: Publish to npm (via OIDC)
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: 'https://registry.npmjs.org'
          scope: '@ministryofjustice'

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Check version and publish
        run: |
          name=$(jq -r .name package.json)
          version=$(jq -r .version package.json)
          latest_version=$(npm view "$name" version --silent 2>/dev/null || echo "unpublished")

          echo "Checking $name..."
          echo "Current version: $version"
          echo "Latest published: $latest_version"

          if [ "$version" == "$latest_version" ]; then
            echo "$name@$version already published; skipping."
          else
            echo "Removing prepare script for CI..."
            tmpfile=$(mktemp)
            jq 'del(.scripts.prepare)' package.json > "$tmpfile" && mv "$tmpfile" package.json

            echo "Publishing $name@$version to npm..."
            npm publish --provenance --access public
          fi
